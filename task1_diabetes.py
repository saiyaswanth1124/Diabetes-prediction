# -*- coding: utf-8 -*-
"""Task1_Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LkW9xq4uvsyPxB72jJOl1P_SwX6jMjgj
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

df = pd.read_csv('/content/diabetes - diabetes.csv')

df.head()

df.shape

df.describe()

df['Outcome'].value_counts()

df.groupby('Outcome').mean()

X = df.drop('Outcome', axis=1)
y = df['Outcome']

print(X)

print(y)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

clf = svm.SVC()

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)

def predict_diabetes(features):
  scaled_features = scaler.transform([features])
  prediction = clf.predict(scaled_features)[0]

  if prediction == 0:
    return "Not Diabetic"
  else:
    return "Diabetic"

patient_features = [6, 148, 72, 35, 0, 33.6, 0.627, 50]
result = predict_diabetes(patient_features)
print(result)

